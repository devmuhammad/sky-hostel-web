"use client";

import { useState } from "react";
import { CardContainer } from "@/shared/components/ui/card-container";
import { StatusBadge } from "@/shared/components/ui/status-badge";
import { Button } from "@/shared/components/ui/button";
import { Input } from "@/shared/components/ui/input";
import { LoadingButton } from "@/shared/components/ui/loading-button";
import { useToast } from "@/shared/hooks/useToast";
import { useAppStore, Payment } from "@/shared/store/appStore";
import { usePayments } from "@/shared/hooks/useAppData";
import React from "react";

interface DuplicateAnalysis {
  payment: Payment;
  paycashlessInvoice?: any;
  paycashlessPayments: any[];
  hasPayments: boolean;
  totalPaid: number;
}

export default function PaymentsPage() {
  const [duplicateEmails, setDuplicateEmails] = useState<string[]>([]);
  const [selectedEmail, setSelectedEmail] = useState("");
  const [analysis, setAnalysis] = useState<DuplicateAnalysis[]>([]);
  const [isAnalyzing, setIsAnalyzing] = useState(false);
  const [isCleaning, setIsCleaning] = useState(false);
  const [searchTerm, setSearchTerm] = useState("");
  const [statusFilter, setStatusFilter] = useState("all");
  const [showDuplicatesOnly, setShowDuplicatesOnly] = useState(false);

  // Use store and hooks instead of local state
  const { payments, loading } = useAppStore();
  const { data, isLoading, error } = usePayments();
  const toast = useToast();

  // Find duplicate emails when payments data changes
  React.useEffect(() => {
    if (payments.length > 0) {
      const emailCounts = payments.reduce((acc: any, payment: Payment) => {
        // Get email from student if available, otherwise use a default
        const email = payment.student?.email || "unknown@email.com";
        acc[email] = (acc[email] || 0) + 1;
        return acc;
      }, {});

      const duplicates = Object.keys(emailCounts).filter(
        (email) => emailCounts[email] > 1 && email !== "unknown@email.com"
      );
      setDuplicateEmails(duplicates);
    }
  }, [payments]);

  const analyzeDuplicates = async () => {
    if (!selectedEmail) {
      toast.error("Please select an email to analyze");
      return;
    }

    setIsAnalyzing(true);
    try {
      const response = await fetch("/api/admin/cleanup-duplicates", {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({
          email: selectedEmail,
          action: "analyze",
        }),
      });

      const result = await response.json();
      if (result.success) {
        setAnalysis(result.analysis || []);
        toast.success("Analysis completed");
      } else {
        toast.error(result.error || "Analysis failed");
      }
    } catch (error) {
      toast.error("Failed to analyze duplicates");
    } finally {
      setIsAnalyzing(false);
    }
  };

  const cleanupDuplicates = async () => {
    if (!selectedEmail) {
      toast.error("Please select an email to clean up");
      return;
    }

    setIsCleaning(true);
    try {
      const response = await fetch("/api/admin/cleanup-duplicates", {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({
          email: selectedEmail,
          action: "cleanup",
        }),
      });

      const result = await response.json();
      if (result.success) {
        toast.success("Cleanup completed successfully");
        // Refresh payments data
        window.location.reload();
      } else {
        toast.error(result.error || "Cleanup failed");
      }
    } catch (error) {
      toast.error("Failed to clean up duplicates");
    } finally {
      setIsCleaning(false);
    }
  };

  // Filter payments based on search and status
  const filteredPayments = payments.filter((payment) => {
    const studentEmail = payment.student?.email || "";
    const studentPhone = payment.student?.phone || "";
    const reference = payment.reference || "";

    const matchesSearch =
      studentEmail.toLowerCase().includes(searchTerm.toLowerCase()) ||
      studentPhone.includes(searchTerm) ||
      reference.includes(searchTerm);

    const matchesStatus =
      statusFilter === "all" || payment.status === statusFilter;

    const isDuplicate = duplicateEmails.includes(studentEmail);
    const matchesDuplicateFilter = !showDuplicatesOnly || isDuplicate;

    return matchesSearch && matchesStatus && matchesDuplicateFilter;
  });

  if (isLoading) {
    return (
      <div className="flex-1 overflow-y-auto p-6">
        <div className="max-w-7xl mx-auto space-y-6">
          <div className="mb-6">
            <h1 className="text-2xl font-bold text-gray-900">Payments</h1>
            <p className="text-sm text-gray-600 mt-1">
              Manage and monitor payment records.
            </p>
          </div>
          <CardContainer>
            <div className="animate-pulse space-y-4">
              {[...Array(5)].map((_, i) => (
                <div key={i} className="flex items-center space-x-4">
                  <div className="h-4 bg-gray-200 rounded w-1/4"></div>
                  <div className="h-4 bg-gray-200 rounded w-1/6"></div>
                  <div className="h-4 bg-gray-200 rounded w-1/6"></div>
                  <div className="h-4 bg-gray-200 rounded w-1/6"></div>
                </div>
              ))}
            </div>
          </CardContainer>
        </div>
      </div>
    );
  }

  if (error) {
    return (
      <div className="flex-1 overflow-y-auto p-6">
        <div className="max-w-7xl mx-auto space-y-6">
          <div className="mb-6">
            <h1 className="text-2xl font-bold text-gray-900">Payments</h1>
            <p className="text-sm text-gray-600 mt-1">
              Manage and monitor payment records.
            </p>
          </div>
          <CardContainer>
            <div className="text-center py-8">
              <p className="text-red-600">Failed to load payments</p>
              <Button onClick={() => window.location.reload()} className="mt-4">
                Retry
              </Button>
            </div>
          </CardContainer>
        </div>
      </div>
    );
  }

  return (
    <div className="p-6">
      <div className="max-w-7xl mx-auto space-y-6">
        {/* Page Header */}
        <div className="mb-6">
          <h1 className="text-2xl font-bold text-gray-900">Payments</h1>
          <p className="text-sm text-gray-600 mt-1">
            Manage and monitor payment records.
          </p>
        </div>

        {/* Filters */}
        <CardContainer>
          <div className="flex flex-wrap gap-4 items-center">
            <div className="flex-1 min-w-0">
              <Input
                placeholder="Search by email, phone, or reference..."
                value={searchTerm}
                onChange={(e) => setSearchTerm(e.target.value)}
                className="max-w-md"
              />
            </div>

            <select
              value={statusFilter}
              onChange={(e) => setStatusFilter(e.target.value)}
              className="px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
            >
              <option value="all">All Status</option>
              <option value="pending">Pending</option>
              <option value="completed">Completed</option>
              <option value="failed">Failed</option>
            </select>

            <label className="flex items-center space-x-2">
              <input
                type="checkbox"
                checked={showDuplicatesOnly}
                onChange={(e) => setShowDuplicatesOnly(e.target.checked)}
                className="rounded border-gray-300"
              />
              <span className="text-sm text-gray-700">
                Show duplicates only
              </span>
            </label>
          </div>
        </CardContainer>

          {/* Duplicate Analysis */}
          {duplicateEmails.length > 0 && (
            <CardContainer title="Duplicate Payments Analysis">
              <div className="space-y-4">
                <div className="flex items-center space-x-4">
                  <select
                    value={selectedEmail}
                    onChange={(e) => setSelectedEmail(e.target.value)}
                    className="px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                  >
                    <option value="">Select an email with duplicates</option>
                    {duplicateEmails.map((email) => (
                      <option key={email} value={email}>
                        {email} (
                        {
                          payments.filter((p) => p.student?.email === email)
                            .length
                        }{" "}
                        payments)
                      </option>
                    ))}
                  </select>

                  <Button
                    onClick={analyzeDuplicates}
                    disabled={!selectedEmail || isAnalyzing}
                  >
                    {isAnalyzing ? "Analyzing..." : "Analyze"}
                  </Button>

                  <LoadingButton
                    onClick={cleanupDuplicates}
                    disabled={!selectedEmail || isCleaning}
                    isLoading={isCleaning}
                    loadingText="Cleaning..."
                  >
                    Clean Up
                  </LoadingButton>
                </div>

                {analysis.length > 0 && (
                  <div className="mt-4 space-y-2">
                    <h4 className="font-medium">Analysis Results:</h4>
                    {analysis.map((item, index) => (
                      <div key={index} className="p-3 bg-gray-50 rounded">
                        <p>
                          <strong>Payment ID:</strong> {item.payment.id}
                        </p>
                        <p>
                          <strong>Amount:</strong> ₦{item.payment.amount_paid}
                        </p>
                        <p>
                          <strong>Total Paid:</strong> ₦{item.totalPaid}
                        </p>
                        <p>
                          <strong>Has PayCashless Payments:</strong>{" "}
                          {item.hasPayments ? "Yes" : "No"}
                        </p>
                      </div>
                    ))}
                  </div>
                )}
              </div>
            </CardContainer>
          )}

          {/* Payments Table */}
          <CardContainer title={`Payments (${filteredPayments.length})`}>
            <div className="overflow-x-auto">
              <table className="min-w-full divide-y divide-gray-200">
                <thead className="bg-gray-50">
                  <tr>
                    <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                      Student
                    </th>
                    <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                      Amount
                    </th>
                    <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                      Status
                    </th>
                    <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                      Reference
                    </th>
                    <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                      Date
                    </th>
                    <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                      Duplicate
                    </th>
                  </tr>
                </thead>
                <tbody className="bg-white divide-y divide-gray-200">
                  {filteredPayments.map((payment) => {
                    const studentEmail = payment.student?.email || "Unknown";
                    const studentPhone = payment.student?.phone || "Unknown";
                    const isDuplicate = duplicateEmails.includes(studentEmail);

                    return (
                      <tr key={payment.id} className="hover:bg-gray-50">
                        <td className="px-6 py-4 whitespace-nowrap">
                          <div>
                            <div className="text-sm font-medium text-gray-900">
                              {studentEmail}
                            </div>
                            <div className="text-sm text-gray-500">
                              {studentPhone}
                            </div>
                          </div>
                        </td>
                        <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-900">
                          ₦{payment.amount_paid.toLocaleString()}
                        </td>
                        <td className="px-6 py-4 whitespace-nowrap">
                          <StatusBadge
                            status={payment.status}
                            variant="payment"
                          />
                        </td>
                        <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-900">
                          {payment.reference}
                        </td>
                        <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-500">
                          {new Date(payment.created_at).toLocaleDateString()}
                        </td>
                        <td className="px-6 py-4 whitespace-nowrap">
                          {isDuplicate && (
                            <span className="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-red-100 text-red-800">
                              Duplicate
                            </span>
                          )}
                        </td>
                      </tr>
                    );
                  })}
                </tbody>
              </table>
            </div>

            {filteredPayments.length === 0 && (
              <div className="text-center py-8">
                <p className="text-gray-500">No payments found</p>
              </div>
            )}
          </CardContainer>
        </div>
      </div>
    </div>
  );
}
